import type { HelixEventSubWebSocketTransportOptions } from '@twurple/api';
import type { EventSubBaseConfig, EventSubListener } from '@twurple/eventsub-base';
import { EventSubBase } from '@twurple/eventsub-base';
/**
 * Configuration for an EventSub WebSocket listener.
 */
export interface EventSubWsConfig extends EventSubBaseConfig {
    /**
     * The URL to connect to initially.
     *
     * Can be used to connect to a test server, for example one created by the Twitch CLI.
     */
    url?: string;
}
/**
 * A WebSocket listener for the Twitch EventSub event distribution mechanism.
 *
 * @beta
 * @hideProtected
 * @inheritDoc
 *
 * @meta category main
 */
export declare class EventSubWsListener extends EventSubBase implements EventSubListener {
    private _connection?;
    private _sessionId?;
    private _welcomeCallback?;
    private readonly _initialUrl;
    private _connecting;
    private _reconnectInProgress;
    private _keepaliveTimeout;
    private _keepaliveTimer;
    /**
     * Creates a new EventSub HTTP listener.
     *
     * @param config
     *
     * @expandParams
     */
    constructor(config: EventSubWsConfig);
    /**
     * Starts the WebSocket listener.
     */
    start(): Promise<void>;
    /**
     * Stops the WebSocket listener.
     */
    stop(): Promise<void>;
    /** @private */
    _getCliTestCommandForSubscription(): Promise<string>;
    /** @private */
    _getTransportOptionsForSubscription(): Promise<HelixEventSubWebSocketTransportOptions>;
    protected _findTwitchSubscriptionToContinue(): undefined;
    private _connect;
    private _connectTo;
    private _disconnect;
    private _reconnect;
    private _initializeKeepaliveTimeout;
    private _clearKeepaliveTimer;
    private _restartKeepaliveTimer;
    private _handleKeepaliveTimeout;
}
//# sourceMappingURL=EventSubWsListener.d.ts.map